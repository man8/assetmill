name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Validate semantic version tag
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        if [[ ! $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
          echo "Error: Tag $TAG does not follow semantic versioning (vX.Y.Z)"
          exit 1
        fi
        echo "RELEASE_VERSION=${TAG#v}" >> $GITHUB_ENV
        echo "TAG_NAME=$TAG" >> $GITHUB_ENV
    
    - name: Verify package.json version matches tag
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        if [[ "$PACKAGE_VERSION" != "$RELEASE_VERSION" ]]; then
          echo "Error: package.json version ($PACKAGE_VERSION) does not match tag version ($RELEASE_VERSION)"
          exit 1
        fi
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests and linting
      run: npm run ci
    
    - name: Build package
      run: npm run build
    
    - name: Generate release notes
      id: release_notes
      run: |
        # Extract changelog section for this version
        if grep -q "## \[$RELEASE_VERSION\]" CHANGELOG.md; then
          # Get content between this version and next version/end
          NOTES=$(sed -n "/## \[$RELEASE_VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' | tail -n +2)
        else
          # Fallback to unreleased section
          NOTES=$(sed -n "/## \[Unreleased\]/,/## \[/p" CHANGELOG.md | sed '$d' | tail -n +2)
        fi
        
        # Save to file for multiline output
        echo "$NOTES" > release_notes.txt
        echo "Generated release notes for version $RELEASE_VERSION"
    
    - name: Publish to npm
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG_NAME }}
        release_name: Release ${{ env.TAG_NAME }}
        body_path: release_notes.txt
        draft: false
        prerelease: ${{ contains(env.TAG_NAME, '-') }}
